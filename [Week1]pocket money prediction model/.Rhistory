model <- lm(ans~mode+score+tem+cov+bon,data = df)
summary(model)
model1 <- step(model,direction = "backward")
model2 <- lm(ans~mode+score+bon,data = df)
summary(model2)
coef(model2)
vif(model2)
pre_dat <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/testing1.csv",header=TRUE, fileEncoding = "UCS-2LE")
pre_dat
colnames(pre_dat) = c("mode","score","bon","ans")
pre_dat
library(sqldf)
pre_dat2 <- sqldf("select mode,score,bon from pre_dat")
pre_dat2
pre <- predict(model2,pre_dat2)
answer <- cbind(pre,pre_dat$ans)
answer
predict(model2,newdata = data.frame(mode=1,score=87,bon=130))
predict(model2,newdata = data.frame(mode=-1,score=100,bon=300))
predict(model2,newdata = data.frame(mode=0,score=60,bon=150))
predict(model2,newdata = data.frame(mode=-1,score=60,bon=150))
predict(model2,newdata = data.frame(mode=0,score=60,bon=150))
df <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/training1.csv",header=TRUE, fileEncoding = "UCS-2LE")
colnames(df) <- c("mode","score","tem","cov","bon","ans")
df
summary(df)
str(df)
model <- lm(ans~mode+score+tem+cov+bon,data = df)
summary(model)
model1 <- step(model,direction = "backward")
model2 <- lm(ans~mode+score+bon,data = df)
summary(model2)
coef(model2)
pre_dat <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/testing1.csv",header=TRUE, fileEncoding = "UCS-2LE")
pre_dat
colnames(pre_dat) = c("mode","score","bon","ans")
pre_dat
library(sqldf)
pre_dat2 <- sqldf("select mode,score,bon from pre_dat")
pre_dat2
pre <- predict(model2,pre_dat2)
answer <- cbind(pre,pre_dat$ans)
answer
predict(model2,newdata = data.frame(mode=1,score=87,bon=130))
predict(model2,newdata = data.frame(mode=-1,score=100,bon=300))
predict(model2,newdata = data.frame(mode=0,score=60,bon=150))
df <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_data.csv",header=TRUE, fileEncoding = "UCS-2LE")
df <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_data.csv",header=TRUE, fileEncoding = "UTF-8")
df
df_train <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_data.csv",header=TRUE, fileEncoding = "UTF-8")
df_test <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_test_data.csv",header=TRUE, fileEncoding = "UTF-8")
View(df_train)
model <- lm(medv~.,data = df_train)
model
summary(model)
model_backward <- step(model,direction = "backward")
model1 <- lm(medv ~ crim + zn + chas + nox + rm + dis + rad + tax + ptratio +
black + lstat,data=df_train)
summary(model)
pre_model <- predict(model,df_test)
pre_model
df_test
df_train
pre_model <- predict(model,df_train$medv)
confusionMatrix(pre_model,df_train$medv)
library(caret)
library(rpart)
confusionMatrix(pre_model,df_train$medv)
df_train$medv <- as.numeric(df_train$medv)
confusionMatrix(pre_model,df_train$medv)
ht<- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/예습자료/8주/Heart.csv",header=TRUE, fileEncoding = "UTF-8")
ht <- na.omit(ht[,-1])
ht
str(ht)
str(df_train)
df_train <- data.frame(crim,zn,indus,chas,nox,rm,age,dis,rad,tax,ptratio,black,lstat,medv)
crim <- as.numeric(df_train$crim)
zn <- as.numeric(df_train$zn)
indus <- as.numeric(df_train$indus)
chas <- as.numeric(df_train$chas)
nox <- as.numeric(df_train$nox)
rm <- as.numeric(df_train$rm)
age <- as.numeric(df_train$age)
dis <- as.numeric(df_train$dis)
rad <- as.numeric(df_train$rad)
tax <- as.numeric(df_train$tax)
ptratio <- as.numeric(df_train$ptratio)
black <- as.numeric(df_train$black)
lstat <- as.numeric(df_train$lstat)
medv <- as.numeric(df_train$medv)
df_train <- data.frame(crim,zn,indus,chas,nox,rm,age,dis,rad,tax,ptratio,black,lstat,medv)
df_train
model <- lm(medv~.,data = df_train)
summary(model)
pre_model <- predict(model,df_test)
pre_model
confusionMatrix(pre_model,df_train$medv)
confusionMatrix(predict(model, newdata = df_train, type="raw"), df_train$medv)
confusionMatrix(predict(model, newdata = df_train), df_train$medv)
indexes <- createDataPartition(y = df_train$medv, p = .75, list = FALSE)
train <- ht[indexes, ]
test <- ht[-indexes, ]
model <- lm(medv~.,data = test)
model <- lm(medv~.,data = train)
train
library(rpart)
library(caret)
df_train <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_data.csv",header=TRUE, fileEncoding = "UTF-8")
df_test <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_test_data.csv",header=TRUE, fileEncoding = "UTF-8")
str(df_train)
crim <- as.numeric(df_train$crim)
zn <- as.numeric(df_train$zn)
indus <- as.numeric(df_train$indus)
chas <- as.numeric(df_train$chas)
nox <- as.numeric(df_train$nox)
rm <- as.numeric(df_train$rm)
age <- as.numeric(df_train$age)
dis <- as.numeric(df_train$dis)
rad <- as.numeric(df_train$rad)
tax <- as.numeric(df_train$tax)
ptratio <- as.numeric(df_train$ptratio)
black <- as.numeric(df_train$black)
lstat <- as.numeric(df_train$lstat)
medv <- as.numeric(df_train$medv)
df_train <- data.frame(crim,zn,indus,chas,nox,rm,age,dis,rad,tax,ptratio,black,lstat,medv)
df_train
indexes <- createDataPartition(y = df_train$medv, p = .75, list = FALSE)
train <- ht[indexes, ]
train <- df_train[indexes, ]
test <- df_train[-indexes, ]
train
model <- lm(medv~.,data = train)
summary(model)
confusionMatrix(predict(model, newdata = df_train), df_train$medv)
confusionMatrix(predict(model, newdata = test, type="raw"), test$medv)
pred <- predict(model,test)
confusionMatrix(pred, test$medv)
pred <- predict(model,test,type='class')
pred
str(test)
indexes <- createDataPartition(y = df_train$medv, p = .75, list = FALSE)
train <- df_train[indexes, ]
test <- df_train[-indexes, ]
model <- lm(medv~.,data = train)
summary(model)
k <- ols_step_best_subset(model)
install.packages("oslrr")
library(oslrr)
install.packages("olsrr")
library(oslrr)
library(olsrr)
model <- lm(medv~.,data = train)
summary(model)
k <- ols_step_best_subset(model)
plot(k)
pred <- predict(model,test)
model_foward <- step(model,direction = "foward")
model_foward <- step(model,direction = "forward")
model_forward <- step(model,direction = "forward")
model_forward
library(rpart)
library(caret)
library(olsrr)
df_train <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_data.csv",header=TRUE, fileEncoding = "UTF-8")
df_train <- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/10주/boston_data.csv",header=TRUE, fileEncoding = "UTF-8")
str(df_train)
indexes <- createDataPartition(y = df_train$medv, p = .75, list = FALSE)
train <- df_train[indexes, ]
test <- df_train[-indexes, ]
str(test)
model <- lm(medv~.,data = train)
summary(model)
k <- ols_step_best_subset(model)
plot(k)
ols_step_best_subset(model)
ols_step_best_subset(model)
model_forward <- lm(medv ~ ., data = train)
ols_step_forward_p(model_forward)
k <- ols_step_forward_p(model_forward)
plot(k)
library(digest)
library(digest)
install.packages("digest")
library(digest)
k <- ols_step_forward_p(model_forward)
plot(k)
ols_step_forward_p(model_forward, details = TRUE)
plot(mdev~.,data = train)
plot(medv~.,data = train)
model <- lm(medv~.,data = train)
plot(model)
summary(model)
ols_step_best_subset(model)
#점진선택법
model_forward <- lm(medv ~ ., data = train)
k <- ols_step_forward_p(model_forward)
plot(k)
ols_step_forward_p(model_forward, details = TRUE)
View(df_train)
#후진선택법
model_backward <- lm(medv ~ ., data = train)
k <- ols_step_backward_p(model_backward)
plot(k)
ols_step_backward_p(model_backward, details = TRUE)
View(df_train)
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat.,data = train)
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
summary(model)
model <- lm(medv~.,data = train)
summary(model)
model <- lm(medv~crim+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
summary(model)
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
summary(model)
model <- lm(medv~.,data = train)
hipcenter_mod_back_aic = step(model, direction = "backward")
simple_forward = step(model, direction = "forward")
start_forward = lm(medv~1,data=train)
simple_forward = step(start_forward, direction = "forward")
simple_forward = step(start_forward,scope = medv~.,  direction = "forward")
simple_forward = step(start_forward, scope = medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,  direction = "forward")
simple_forward = step(start_forward, scope = medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat+age+indus,  direction = "forward")
model <- lm(medv~.,data = df_train)
summary(model)
plot(model)
#======================================
#점진선택법
model_forward <- lm(medv ~ ., data = df_train)
k <- ols_step_forward_p(model_forward)
plot(k)
ols_step_forward_p(model_forward, details = TRUE)
start_forward = lm(medv~1,data=train)
simple_forward = step(start_forward, scope = medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat+age+indus,  direction = "forward")
#후진선택법
model_backward <- lm(medv ~ ., data = df_train)
k <- ols_step_backward_p(model_backward)
plot(k)
ols_step_backward_p(model_backward, details = TRUE)
simple_backward = step(model, direction = "backward")
#======================================
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
summary(model)
indexes <- createDataPartition(y = df_train$medv, p = .75, list = FALSE)
train <- df_train[indexes, ]
test <- df_train[-indexes, ]
library(e1071)
set.seed(100)
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
#======================================
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = df_train)
summary(model)
#후진선택법
model_backward <- lm(medv ~ ., data = df_train)
k <- ols_step_backward_p(model_backward)
plot(k)
simple_backward = step(model, direction = "backward")
#======================================
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = df_train)
summary(model)
indexes <- createDataPartition(y = df_train$medv, p = .75, list = FALSE)
train <- df_train[indexes, ]
test <- df_train[-indexes, ]
set.seed(100)
model <- lm(medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
pred <- predict(model, test)
pred
summary (model)
model <- lm(medv~crim+zn+nox+rm+dis+rad+tax+ptratio+black+lstat,data = train)
summary(model)
actuals_preds <- data.frame(cbind(actuals=test$medv, predicteds=pred))
correlation_accuracy <- cor(actuals_preds)
head(actuals_preds)
correlation_accuracy
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
min_max_accuracy
library(DAAG)
install.packages("DAAG")
library(DAAG)
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=29,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
library(DAAG)
windows()
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=29,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
attr(cvResults, 'ms')
attr(cvResults,'rms')
cvResults
library(DAAG)
windows()
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
cvResults
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
min_max_accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=1000,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=10,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=1,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE,
main="Small symbols are predicted values while bigger ones are actuals."));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
actuals_preds <- data.frame(cbind(actuals=test$medv, predicteds=pred))
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
head(actuals_preds)
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
actuals_preds <- data.frame(cbind(actuals=test$medv, predicteds=pred))
actuals_preds
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
head(actuals_preds)
actuals_preds <- data.frame(cbind(actuals=cvResults$medv, predicteds=cvResults$Predicted))
actuals_preds
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
actuals_preds <- data.frame(cbind(actuals=test$medv, predicteds=pred))
actuals_preds
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
head(actuals_preds)
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE
);
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE));
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE,));
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE));
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE
));
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft"
));
windows()
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft"
));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
actuals_preds <- data.frame(cbind(actuals=cvResults$medv, predicteds=cvResults$Predicted))
actuals_preds
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
windows()
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=FALSE
));
cvResults <- suppressWarnings(
CVlm(data = df_train,
form.lm=medv~crim+zn+chas+nox+rm+dis+rad+tax+ptratio+black+lstat,
m=5,
dots=FALSE,
seed=100,
legend.pos="topleft",
printit=TRUE
));
cvResults
attr(cvResults, 'ms')
#평균 제곱 오차(MSE)
sqrt(attr(cvResults,'ms'))
actuals_preds <- data.frame(cbind(actuals=cvResults$medv, predicteds=cvResults$Predicted))
actuals_preds
correlation_accuracy <- cor(actuals_preds)
correlation_accuracy
min_max_accuracy <- mean(apply(actuals_preds, 1, min) / apply(actuals_preds, 1, max))
min_max_accuracy
mape <- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/actuals_preds$actuals)
mape
