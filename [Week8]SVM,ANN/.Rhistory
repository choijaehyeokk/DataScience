data = train,
method = "svmLinear",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C = seq(0, 2, length = 20)))
plot(svm)
svm$bestTune
test$svm <- predict(svm, newdata = test)
conf_svm <- confusionMatrix(test$AHD, test$svm, positive = 'Yes')
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
#sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
#spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
acc_svm
#########
## svm ##
#########
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C = seq(0, 2, length = 20)))
#########
## svm ##
#########
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
#########
## svm ##
#########
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
plot(svm)
svm$bestTune
test$svm <- predict(svm, newdata = test)
conf_svm <- confusionMatrix(test$AHD, test$svm, positive = 'Yes')
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
#sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
#spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
acc_svm
svm$bestTune
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
tuneGrid = expand.grid(cost = 0.25)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
plot(svm)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
acc2 <- confusionMatrix(pred, test$AHD)$overall['Accuracy']
acc2
svm <- train(AHD~.,
data = train,
method = "svmRadial",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
acc3 <- confusionMatrix(pred, test$AHD)$overall['Accuracy']
acc3
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
confusionMatrix(pred, test$AHD)
acc4 <- confusionMatrix(pred, test$AHD)$overall['Accuracy']
acc4
result <- tibble(Model = c('SVM Linear2',
'SVM Linear add cost',
'SVM Radial',
'SVM POly'
),
Accuracy = c(acc1,
acc2,
acc3,
acc4)
)
result <- tibble(Model = c('SVM Linear2',
'SVM Linear add cost',
'SVM Radial',
'SVM POly'
),
Accuracy = c(acc_svm,
acc2,
acc3,
acc4)
)
result
result <- tibble(Model = c('SVM Linear2',
'SVM Linear2 add cost',
'SVM Radial',
'SVM POly'
),
Accuracy = c(acc_svm,
acc2*100,
acc3*100,
acc4*100)
)
result
svm <- train(AHD~.,
data = train,
method = "svmRadial",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
svm
svm$bestTune
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C =1,sigma(0.11))
)
tuneGrid = expand.grid(C =c(1,sigma(0.11))
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C =c(1,sigma(0.11)))
)
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C =c(1),sigma(0.11))
)
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C =c(1,1,1),sigma(0.11))
)
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
acc4 <- confusionMatrix(pred, test$AHD)$overall['Accuracy']
acc4
result <- tibble(Model = c('SVM Linear2',
'SVM Linear2 add cost',
'SVM Radial',
'SVM POly'
),
Accuracy = c(acc_svm,
acc2*100,
acc3*100,
acc4*100)
)
#########
## svm ##
#########
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
plot(svm)
svm$bestTune
test$svm <- predict(svm, newdata = test)
conf_svm <- confusionMatrix(test$AHD, test$svm, positive = 'Yes')
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
#sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
#spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
acc_svm
conf_svm
tuneGrid = expand.grid(cost = 0.25)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
library(readxl)
library(e1071)
library(caret)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(nnet)
library(ROCR)
library(devtools)
library(reshape)
library(keras)
rm(list=ls())
ht<- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/예습자료/8주/Heart.csv",header=TRUE, fileEncoding = "UTF-8")
ht <- na.omit(ht[,-1])
ht
library(tidyverse)
library(rpart)
library(e1071)
library(caret)
library(nnet)
library(neuralnet)
set.seed(100)
heart2<- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/과제/7주/heart.csv",header=TRUE, fileEncoding = "UCS-2LE")
#회귀분석을 통해서 유의한 변수 추출
model0 <- lm(target~.,data = heart2)
summary(model0)
ht
str(ht)
sex <- as.numeric(ht$Sex)
cp <- factor(ht$ChestPain, levels = c("typical", "nontypical" ,
"asymptomatic", "nonanginal"))
ca <- as.numeric(ht$Ca)
thal <- factor(ht$Thal, levels = c("fixed", "normal", "reversable"))
AHD <- factor(ht$AHD, levels = c("No", "Yes"))
ht <- data.frame(sex, cp, ca, thal, AHD)
str(ht)
library(nnet)
library(ROCR)
library(devtools)
library(reshape)
library(keras)
rm(list=ls())
ht<- read.csv(file = "C:/Users/user/Desktop/3학년2학기/데이터사이언스/예습자료/8주/Heart.csv",header=TRUE, fileEncoding = "UTF-8")
ht <- na.omit(ht[,-1])
ht
str(ht)
sex <- as.numeric(ht$Sex)
cp <- factor(ht$ChestPain, levels = c("typical", "nontypical" ,
"asymptomatic", "nonanginal"))
ca <- as.numeric(ht$Ca)
thal <- factor(ht$Thal, levels = c("fixed", "normal", "reversable"))
AHD <- factor(ht$AHD, levels = c("No", "Yes"))
ht <- data.frame(sex, cp, ca, thal, AHD)
str(ht)
preProcValues <- preProcess(ht)
ht <- predict(preProcValues, ht)
summary(ht)
set.seed(1)
indexes <- createDataPartition(y = ht$AHD, p = .75, list = FALSE)
train <- ht[indexes, ]
test <- ht[-indexes, ]
##########
## nnet ##
##########
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 2,
classProbs = TRUE,
summaryFunction = twoClassSummary)
nnet <- train(AHD~.,
data = train,
method = "nnet",
metric = "ROC",
preProcess = c("center","scale"),
maxit = 10000,
trControl = fitControl,
trace = FALSE,
tuneGrid = expand.grid(size=c(1), decay=c(0.001, 0.01, 0.1, 0.2, 0.3))
)
# plot
windows()
plot(nnet)
dev.off()
nnet$bestTune
windows()
plot.nnet(nnet)
dev.off()
test$nnet <- predict(nnet, newdata = test)
conf_nnet <- confusionMatrix(test$AHD, test$nnet, positive = 'Yes')
acc_nnet <- 100 * conf_nnet[["overall"]][["Accuracy"]]
sens_nnet <- 100 * conf_nnet[["byClass"]][["Sensitivity"]]
spec_nnet <- 100 * conf_nnet[["byClass"]][["Specificity"]]
acc_nnet
sens_nnet
spec_nnet
#########
## svm ##
#########
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
names(getModelInfo("svm"))
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
plot(svm)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
plot(svm)
svm$bestTune
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
plot(svm)
svm$bestTune
test$svm <- predict(svm, newdata = test)
conf_svm <- confusionMatrix(test$AHD, test$svm, positive = 'Yes')
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
#sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
#spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
acc_svm
conf_svm
tuneGrid = expand.grid(cost = 0.25)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
plot(svm)
svm$bestTune
test$svm <- predict(svm, newdata = test)
conf_svm <- confusionMatrix(test$AHD, test$svm, positive = 'Yes')
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
conf_svm
tuneGrid = expand.grid(cost = 0.25)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
acc_svm
sens_svm
spec_svm
acc_svm2 <- 100 * acc2[["overall"]][["Accuracy"]]
confusionMatrix(pred, test$AHD)
acc2 <- confusionMatrix(pred, test$AHD)$overall['Accuracy']
acc2
acc_svm2 <- 100 * acc2[["overall"]][["Accuracy"]]
tuneGrid = expand.grid(cost = 0.25)
svm <- train(AHD~.,
data = train,
method = "svmLinear2",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl,
tuneGrid = tuneGrid)
test$svm <- predict(svm, newdata = test)
conf_svm <- confusionMatrix(test$AHD, test$svm, positive = 'Yes')
acc_svm <- 100 * conf_svm[["overall"]][["Accuracy"]]
sens_svm <- 100 * conf_svm[["byClass"]][["Sensitivity"]]
spec_svm <- 100 * conf_svm[["byClass"]][["Specificity"]]
acc_svm
sens_svm
spec_svm
svm <- train(AHD~.,
data = train,
method = "svmRadial",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
#tuneGrid = expand.grid(C = seq(0, 2, length = 20))
)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
acc3 <- confusionMatrix(pred, test$AHD)$overall['Accuracy']
acc3
svm$bestTune
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
)
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
)
pred <- predict(svm, test)
pred
print(data.frame(test$AHD, pred))
confusionMatrix(pred, test$AHD)
svm <- train(AHD~.,
data = train,
method = "svmPoly",
metric = "ROC",
preProcess = c("center","scale"),
trControl = fitControl
)
svm$bestTune
